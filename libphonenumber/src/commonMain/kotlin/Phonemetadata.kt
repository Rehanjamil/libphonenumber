/*
 * Copyright (C) 2010 The Libphonenumber Authors
 * Copyright (C) 2022 Michael Rozumyanskiy
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Definition of the class representing metadata for international telephone numbers. This class is
 * hand created based on the class file compiled from phonemetadata.proto. Please refer to that file
 * for detailed descriptions of the meaning of each field.
 *
 *
 * WARNING: This API isn't stable. It is considered libphonenumber-internal and can change at any
 * time. We only declare it as public for easy inclusion in our build tools not in this package.
 * Clients should not refer to this file, we do not commit to support backwards-compatibility or to
 * warn about breaking changes.
 */
package io.michaelrocks.libphonenumber.kotlin

import kotlinx.serialization.KSerializer
import kotlinx.serialization.builtins.ListSerializer
import kotlinx.serialization.builtins.serializer
import kotlinx.serialization.descriptors.SerialDescriptor
import kotlinx.serialization.descriptors.buildClassSerialDescriptor
import kotlinx.serialization.descriptors.element
import kotlinx.serialization.encoding.CompositeDecoder
import kotlinx.serialization.encoding.Decoder
import kotlinx.serialization.encoding.Encoder
import kotlinx.serialization.encoding.decodeStructure
import kotlinx.serialization.encoding.encodeStructure
import kotlin.jvm.JvmStatic


class Phonemetadata private constructor() {
    open class NumberFormat {
        /**
         * Provides a dummy builder to 'emulate' the API of the code generated by the latest version of
         * Protocol Buffers. This lets BuildMetadataFromXml class to build with both this hand created
         * class and the one generated by the latest version of Protocol Buffers.
         */


        class Builder : NumberFormat() {
            fun build(): NumberFormat {
                return this
            }

            fun mergeFrom(other: NumberFormat): Builder {
                if (other.hasPattern()) {
                    setPattern(other.pattern)
                }
                if (other.hasFormat()) {
                    setFormat(other.format)
                }
                for (i in 0 until other.leadingDigitsPatternSize()) {
                    addLeadingDigitsPattern(other.getLeadingDigitsPattern(i))
                }
                if (other.hasNationalPrefixFormattingRule()) {
                    setNationalPrefixFormattingRule(other.nationalPrefixFormattingRule)
                }
                if (other.hasDomesticCarrierCodeFormattingRule()) {
                    setDomesticCarrierCodeFormattingRule(other.domesticCarrierCodeFormattingRule)
                }
                if (other.hasNationalPrefixOptionalWhenFormatting()) {
                    setNationalPrefixOptionalWhenFormatting(other.nationalPrefixOptionalWhenFormatting)
                }
                return this
            }
        }

        // required string pattern = 1;
        private var hasPattern = false
        var pattern = ""
            private set

        fun hasPattern(): Boolean {
            return hasPattern
        }

        fun setPattern(value: String): NumberFormat {
            hasPattern = true
            pattern = value
            return this
        }

        // required string format = 2;
        private var hasFormat = false
        var format = ""
            private set

        fun hasFormat(): Boolean {
            return hasFormat
        }

        fun setFormat(value: String): NumberFormat {
            hasFormat = true
            format = value
            return this
        }

        // repeated string leading_digits_pattern = 3;
        private val leadingDigitsPattern_: MutableList<String> = ArrayList()
        fun leadingDigitPatterns(): List<String> {
            return leadingDigitsPattern_
        }

        @Deprecated("")
        fun leadingDigitsPatternSize(): Int {
            return leadingDigitsPatternCount
        }

        val leadingDigitsPatternCount: Int
            get() = leadingDigitsPattern_.size

        fun getLeadingDigitsPattern(index: Int): String {
            return leadingDigitsPattern_[index]
        }

        fun addLeadingDigitsPattern(value: String?): NumberFormat {
            if (value == null) {
                throw NullPointerException()
            }
            leadingDigitsPattern_.add(value)
            return this
        }

        // optional string national_prefix_formatting_rule = 4;
        private var hasNationalPrefixFormattingRule = false
        var nationalPrefixFormattingRule = ""
            private set

        fun hasNationalPrefixFormattingRule(): Boolean {
            return hasNationalPrefixFormattingRule
        }

        fun setNationalPrefixFormattingRule(value: String): NumberFormat {
            hasNationalPrefixFormattingRule = true
            nationalPrefixFormattingRule = value
            return this
        }

        fun clearNationalPrefixFormattingRule(): NumberFormat {
            hasNationalPrefixFormattingRule = false
            nationalPrefixFormattingRule = ""
            return this
        }

        // optional bool national_prefix_optional_when_formatting = 6 [default = false];
        private var hasNationalPrefixOptionalWhenFormatting = false
        var nationalPrefixOptionalWhenFormatting = false
            private set

        fun hasNationalPrefixOptionalWhenFormatting(): Boolean {
            return hasNationalPrefixOptionalWhenFormatting
        }

        fun setNationalPrefixOptionalWhenFormatting(value: Boolean): NumberFormat {
            hasNationalPrefixOptionalWhenFormatting = true
            nationalPrefixOptionalWhenFormatting = value
            return this
        }

        // optional string domestic_carrier_code_formatting_rule = 5;
        private var hasDomesticCarrierCodeFormattingRule = false
        var domesticCarrierCodeFormattingRule = ""
            private set

        fun hasDomesticCarrierCodeFormattingRule(): Boolean {
            return hasDomesticCarrierCodeFormattingRule
        }

        fun setDomesticCarrierCodeFormattingRule(value: String): NumberFormat {
            hasDomesticCarrierCodeFormattingRule = true
            domesticCarrierCodeFormattingRule = value
            return this
        }

//        override fun writeExternal(out: ObjectOutput) {
//            out.writeUTF(pattern)
//            out.writeUTF(format)
//            val leadingDigitsPatternSize = leadingDigitsPatternSize()
//            out.writeInt(leadingDigitsPatternSize)
//            for (i in 0 until leadingDigitsPatternSize) {
//                out.writeUTF(leadingDigitsPattern_[i])
//            }
//            out.writeBoolean(hasNationalPrefixFormattingRule)
//            if (hasNationalPrefixFormattingRule) {
//                out.writeUTF(nationalPrefixFormattingRule)
//            }
//            out.writeBoolean(hasDomesticCarrierCodeFormattingRule)
//            if (hasDomesticCarrierCodeFormattingRule) {
//                out.writeUTF(domesticCarrierCodeFormattingRule)
//            }
//            out.writeBoolean(nationalPrefixOptionalWhenFormatting)
//        }
//
//        override fun readExternal(input: ObjectInput) {
//            setPattern(input.readUTF())
//            setFormat(input.readUTF())
//            val leadingDigitsPatternSize = input.readInt()
//            for (i in 0 until leadingDigitsPatternSize) {
//                leadingDigitsPattern_.add(input.readUTF())
//            }
//            if (input.readBoolean()) {
//                setNationalPrefixFormattingRule(input.readUTF())
//            }
//            if (input.readBoolean()) {
//                setDomesticCarrierCodeFormattingRule(input.readUTF())
//            }
//            setNationalPrefixOptionalWhenFormatting(input.readBoolean())
//        }

        companion object {
            private const val serialVersionUID: Long = 1

            @JvmStatic
            fun newBuilder(): Builder {
                return Builder()
            }
        }
    }

    object NumberFormatSerializer : KSerializer<NumberFormat> {
        override val descriptor: SerialDescriptor = buildClassSerialDescriptor("NumberFormat") {
            // Add descriptors for all properties in your class
            element<String>("pattern")
            element<String>("format")
            element<MutableList<String>>("leadingDigitsPattern_")
            element<Boolean>("hasNationalPrefixFormattingRule")
            element<String>("nationalPrefixFormattingRule")
            element<Boolean>("hasDomesticCarrierCodeFormattingRule")
            element<String>("domesticCarrierCodeFormattingRule")
            element<Boolean>("nationalPrefixOptionalWhenFormatting")
        }

        override fun serialize(encoder: Encoder, value: NumberFormat) {
            val compositeOutput = encoder.beginStructure(descriptor)
            compositeOutput.encodeStringElement(descriptor, 0, value.pattern)
            compositeOutput.encodeStringElement(descriptor, 1, value.format)
            compositeOutput.encodeSerializableElement(
                descriptor, 2, ListSerializer(String.serializer()), value.leadingDigitPatterns()
            )
            compositeOutput.encodeBooleanElement(
                descriptor, 3, value.hasNationalPrefixFormattingRule()
            )
            if (value.hasNationalPrefixFormattingRule()) {
                compositeOutput.encodeStringElement(
                    descriptor, 4, value.nationalPrefixFormattingRule
                )
            }

            compositeOutput.encodeBooleanElement(
                descriptor, 5, value.hasDomesticCarrierCodeFormattingRule()
            )
            if (value.hasDomesticCarrierCodeFormattingRule()) {
                compositeOutput.encodeStringElement(
                    descriptor, 6, value.domesticCarrierCodeFormattingRule
                )
            }
            compositeOutput.encodeBooleanElement(
                descriptor, 7, value.nationalPrefixOptionalWhenFormatting
            )
            compositeOutput.endStructure(descriptor)
        }

        override fun deserialize(decoder: Decoder): NumberFormat {
            val compositeInput = decoder.beginStructure(descriptor)
            lateinit var pattern: String
            lateinit var format: String
            lateinit var leadingDigitsPattern: List<String>
            var hasNationalPrefixFormattingRule = false
            lateinit var nationalPrefixFormattingRule: String
            var nationalPrefixOptionalWhenFormatting: Boolean = false
            var hasDomesticCarrierCodeFormattingRule: Boolean = false
            lateinit var domesticCarrierCodeFormattingRule: String

            loop@ while (true) {
                when (val index = compositeInput.decodeElementIndex(descriptor)) {
                    CompositeDecoder.DECODE_DONE -> break@loop
                    0 -> pattern = compositeInput.decodeStringElement(descriptor, index)
                    1 -> format = compositeInput.decodeStringElement(descriptor, index)
                    2 -> leadingDigitsPattern = compositeInput.decodeSerializableElement(
                        descriptor, index, ListSerializer(String.serializer())
                    )

                    3 -> hasNationalPrefixFormattingRule = compositeInput.decodeBooleanElement(
                        descriptor, index
                    )

                    4 -> if (hasNationalPrefixFormattingRule) {
                        nationalPrefixFormattingRule =
                            compositeInput.decodeStringElement(descriptor, index)
                    }

                    5 -> hasDomesticCarrierCodeFormattingRule =
                        compositeInput.decodeBooleanElement(descriptor, index)

                    6 -> if (hasDomesticCarrierCodeFormattingRule) domesticCarrierCodeFormattingRule =
                        compositeInput.decodeStringElement(descriptor, index)

                    7 -> nationalPrefixOptionalWhenFormatting =
                        compositeInput.decodeBooleanElement(descriptor, index)
                }
            }

            compositeInput.endStructure(descriptor)
            return NumberFormat().apply {
                setPattern(pattern)
                setFormat(format)
                leadingDigitsPattern.forEach { addLeadingDigitsPattern(it) }
                if (hasNationalPrefixFormattingRule) setNationalPrefixFormattingRule(
                    nationalPrefixFormattingRule
                )
                if (hasDomesticCarrierCodeFormattingRule) {
                    setDomesticCarrierCodeFormattingRule(domesticCarrierCodeFormattingRule)
                }
                setNationalPrefixOptionalWhenFormatting(nationalPrefixOptionalWhenFormatting)
            }
        }
    }

    open class PhoneNumberDesc {
        /**
         * Provides a dummy builder.
         *
         * @see NumberFormat.Builder
         */
        class Builder : PhoneNumberDesc() {
            fun build(): PhoneNumberDesc {
                return this
            }

            fun mergeFrom(other: PhoneNumberDesc): Builder {
                if (other.hasNationalNumberPattern()) {
                    setNationalNumberPattern(other.nationalNumberPattern)
                }
                for (i in 0 until other.possibleLengthCount) {
                    addPossibleLength(other.getPossibleLength(i))
                }
                for (i in 0 until other.possibleLengthLocalOnlyCount) {
                    addPossibleLengthLocalOnly(other.getPossibleLengthLocalOnly(i))
                }
                if (other.hasExampleNumber()) {
                    setExampleNumber(other.exampleNumber)
                }
                return this
            }
        }

        // optional string national_number_pattern = 2;
        private var hasNationalNumberPattern = false
        var nationalNumberPattern = ""
            private set

        fun hasNationalNumberPattern(): Boolean {
            return hasNationalNumberPattern
        }

        fun setNationalNumberPattern(value: String): PhoneNumberDesc {
            hasNationalNumberPattern = true
            nationalNumberPattern = value
            return this
        }

        fun clearNationalNumberPattern(): PhoneNumberDesc {
            hasNationalNumberPattern = false
            nationalNumberPattern = ""
            return this
        }

        // repeated int32 possible_length = 9;
        private val possibleLength_: MutableList<Int> = ArrayList()
        val possibleLengthList: List<Int>
            get() = possibleLength_
        val possibleLengthCount: Int
            get() = possibleLength_.size

        fun getPossibleLength(index: Int): Int {
            return possibleLength_[index]
        }

        fun addPossibleLength(value: Int): PhoneNumberDesc {
            possibleLength_.add(value)
            return this
        }

        fun clearPossibleLength(): PhoneNumberDesc {
            possibleLength_.clear()
            return this
        }

        // repeated int32 possible_length_local_only = 10;
        private val possibleLengthLocalOnly_: MutableList<Int> = ArrayList()
        val possibleLengthLocalOnlyList: List<Int>
            get() = possibleLengthLocalOnly_
        val possibleLengthLocalOnlyCount: Int
            get() = possibleLengthLocalOnly_.size

        fun getPossibleLengthLocalOnly(index: Int): Int {
            return possibleLengthLocalOnly_[index]
        }

        fun addPossibleLengthLocalOnly(value: Int): PhoneNumberDesc {
            possibleLengthLocalOnly_.add(value)
            return this
        }

        fun clearPossibleLengthLocalOnly(): PhoneNumberDesc {
            possibleLengthLocalOnly_.clear()
            return this
        }

        // optional string example_number = 6;
        private var hasExampleNumber = false
        var exampleNumber = ""
            private set

        fun hasExampleNumber(): Boolean {
            return hasExampleNumber
        }

        fun setExampleNumber(value: String): PhoneNumberDesc {
            hasExampleNumber = true
            exampleNumber = value
            return this
        }

        fun clearExampleNumber(): PhoneNumberDesc {
            hasExampleNumber = false
            exampleNumber = ""
            return this
        }

        fun exactlySameAs(other: PhoneNumberDesc): Boolean {
            return nationalNumberPattern == other.nationalNumberPattern && possibleLength_ == other.possibleLength_ && possibleLengthLocalOnly_ == other.possibleLengthLocalOnly_ && exampleNumber == other.exampleNumber
        }


        companion object {
            private const val serialVersionUID: Long = 1

            @JvmStatic
            fun newBuilder(): Builder {
                return Builder()
            }
        }
    }

    object PhoneNumberDescSerializer : KSerializer<PhoneNumberDesc> {
        override val descriptor: SerialDescriptor = buildClassSerialDescriptor("PhoneNumberDesc") {
            element<Boolean>("hasNationalNumberPattern")
            element<String>("nationalNumberPattern")
            element<List<Int>>("possibleLengthList")
            element<List<Int>>("possibleLengthLocalOnlyList")
            element<String>("exampleNumber")
        }

        override fun serialize(encoder: Encoder, value: PhoneNumberDesc) {
            encoder.encodeStructure(descriptor) {
                encodeBooleanElement(descriptor, 0, value.hasNationalNumberPattern())
                encodeStringElement(descriptor, 1, value.nationalNumberPattern)
                encodeSerializableElement(
                    descriptor, 2, ListSerializer(Int.serializer()), value.possibleLengthList
                )
                encodeSerializableElement(
                    descriptor,
                    3,
                    ListSerializer(Int.serializer()),
                    value.possibleLengthLocalOnlyList
                )
                encodeStringElement(descriptor, 4, value.exampleNumber)
            }
        }

        override fun deserialize(decoder: Decoder): PhoneNumberDesc {
            return decoder.decodeStructure(descriptor) {
                var nationalNumberPattern = ""
                var possibleLengthList = emptyList<Int>()
                var possibleLengthLocalOnlyList = emptyList<Int>()
                var exampleNumber = ""
                var hasNationalPattern = false

                while (true) {
                    when (val index = decodeElementIndex(descriptor)) {
                        0 -> hasNationalPattern = decodeBooleanElement(descriptor, index)
                        1 -> if (hasNationalPattern) {
                            nationalNumberPattern = decodeStringElement(descriptor, index)
                        }

                        2 -> possibleLengthList = decodeSerializableElement(
                            descriptor, index, ListSerializer(Int.serializer())
                        )

                        3 -> possibleLengthLocalOnlyList = decodeSerializableElement(
                            descriptor, index, ListSerializer(Int.serializer())
                        )

                        4 -> exampleNumber = decodeStringElement(descriptor, index)
                        CompositeDecoder.DECODE_DONE -> break
                        else -> error("Unexpected index: $index")
                    }
                }

                PhoneNumberDesc().apply {
                    if (hasNationalPattern) {
                        setNationalNumberPattern(nationalNumberPattern)
                    }
                    possibleLengthList.forEach {
                        addPossibleLength(it)
                    }
                    possibleLengthLocalOnlyList.forEach {
                        addPossibleLengthLocalOnly(it)
                    }
                    setExampleNumber(exampleNumber)
                }
            }
        }
    }


    open class PhoneMetadata {
        /**
         * Provides a dummy builder.
         *
         * @see NumberFormat.Builder
         */
        class Builder : PhoneMetadata() {
            fun build(): PhoneMetadata {
                return this
            }

            override fun setId(value: String?): Builder {
                super.setId(value)
                return this
            }

            override fun setInternationalPrefix(value: String): Builder {
                super.setInternationalPrefix(value)
                return this
            }
        }

        // optional PhoneNumberDesc general_desc = 1;
        private var hasGeneralDesc = false
        var generalDesc: PhoneNumberDesc? = null
            private set

        fun hasGeneralDesc(): Boolean {
            return hasGeneralDesc
        }

        val generalDescBuilder: PhoneNumberDesc
            get() {
                if (generalDesc == null) {
                    generalDesc = PhoneNumberDesc()
                }
                return generalDesc!!
            }

        fun setGeneralDesc(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasGeneralDesc = true
            generalDesc = value
            return this
        }

        // optional PhoneNumberDesc fixed_line = 2;
        private var hasFixedLine = false
        var fixedLine: PhoneNumberDesc? = null
            private set

        fun hasFixedLine(): Boolean {
            return hasFixedLine
        }

        fun setFixedLine(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasFixedLine = true
            fixedLine = value
            return this
        }

        // optional PhoneNumberDesc mobile = 3;
        private var hasMobile = false
        var mobile: PhoneNumberDesc? = null
            private set

        fun hasMobile(): Boolean {
            return hasMobile
        }

        fun setMobile(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasMobile = true
            mobile = value
            return this
        }

        // optional PhoneNumberDesc toll_free = 4;
        private var hasTollFree = false
        var tollFree: PhoneNumberDesc? = null
            private set

        fun hasTollFree(): Boolean {
            return hasTollFree
        }

        fun setTollFree(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasTollFree = true
            tollFree = value
            return this
        }

        // optional PhoneNumberDesc premium_rate = 5;
        private var hasPremiumRate = false
        var premiumRate: PhoneNumberDesc? = null
            private set

        fun hasPremiumRate(): Boolean {
            return hasPremiumRate
        }

        fun setPremiumRate(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasPremiumRate = true
            premiumRate = value
            return this
        }

        // optional PhoneNumberDesc shared_cost = 6;
        private var hasSharedCost = false
        var sharedCost: PhoneNumberDesc? = null
            private set

        fun hasSharedCost(): Boolean {
            return hasSharedCost
        }

        fun setSharedCost(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasSharedCost = true
            sharedCost = value
            return this
        }

        // optional PhoneNumberDesc personal_number = 7;
        private var hasPersonalNumber = false
        var personalNumber: PhoneNumberDesc? = null
            private set

        fun hasPersonalNumber(): Boolean {
            return hasPersonalNumber
        }

        fun setPersonalNumber(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasPersonalNumber = true
            personalNumber = value
            return this
        }

        // optional PhoneNumberDesc voip = 8;
        private var hasVoip = false
        var voip: PhoneNumberDesc? = null
            private set

        fun hasVoip(): Boolean {
            return hasVoip
        }

        fun setVoip(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasVoip = true
            voip = value
            return this
        }

        // optional PhoneNumberDesc pager = 21;
        private var hasPager = false
        var pager: PhoneNumberDesc? = null
            private set

        fun hasPager(): Boolean {
            return hasPager
        }

        fun setPager(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasPager = true
            pager = value
            return this
        }

        // optional PhoneNumberDesc uan = 25;
        private var hasUan = false
        var uan: PhoneNumberDesc? = null
            private set

        fun hasUan(): Boolean {
            return hasUan
        }

        fun setUan(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasUan = true
            uan = value
            return this
        }

        // optional PhoneNumberDesc emergency = 27;
        private var hasEmergency = false
        var emergency: PhoneNumberDesc? = null
            private set

        fun hasEmergency(): Boolean {
            return hasEmergency
        }

        fun setEmergency(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasEmergency = true
            emergency = value
            return this
        }

        // optional PhoneNumberDesc voicemail = 28;
        private var hasVoicemail = false
        var voicemail: PhoneNumberDesc? = null
            private set

        fun hasVoicemail(): Boolean {
            return hasVoicemail
        }

        fun setVoicemail(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasVoicemail = true
            voicemail = value
            return this
        }

        // optional PhoneNumberDesc short_code = 29;
        private var hasShortCode = false
        var shortCode: PhoneNumberDesc? = null
            private set

        fun hasShortCode(): Boolean {
            return hasShortCode
        }

        fun setShortCode(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasShortCode = true
            shortCode = value
            return this
        }

        // optional PhoneNumberDesc standard_rate = 30;
        private var hasStandardRate = false
        var standardRate: PhoneNumberDesc? = null
            private set

        fun hasStandardRate(): Boolean {
            return hasStandardRate
        }

        fun setStandardRate(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasStandardRate = true
            standardRate = value
            return this
        }

        // optional PhoneNumberDesc carrier_specific = 31;
        private var hasCarrierSpecific = false
        var carrierSpecific: PhoneNumberDesc? = null
            private set

        fun hasCarrierSpecific(): Boolean {
            return hasCarrierSpecific
        }

        fun setCarrierSpecific(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasCarrierSpecific = true
            carrierSpecific = value
            return this
        }

        // optional PhoneNumberDesc sms_services = 33;
        private var hasSmsServices = false
        var smsServices: PhoneNumberDesc? = null
            private set

        fun hasSmsServices(): Boolean {
            return hasSmsServices
        }

        fun setSmsServices(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasSmsServices = true
            smsServices = value
            return this
        }

        // optional PhoneNumberDesc noInternationalDialling = 24;
        private var hasNoInternationalDialling = false
        var noInternationalDialling: PhoneNumberDesc? = null
            private set

        fun hasNoInternationalDialling(): Boolean {
            return hasNoInternationalDialling
        }

        fun setNoInternationalDialling(value: PhoneNumberDesc?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            hasNoInternationalDialling = true
            noInternationalDialling = value
            return this
        }

        // required string id = 9;
        private var hasId = false
        var id: String? = ""
            private set

        fun hasId(): Boolean {
            return hasId
        }

        open fun setId(value: String?): PhoneMetadata {
            hasId = true
            id = value
            return this
        }

        // optional int32 country_code = 10;
        private var hasCountryCode = false
        var countryCode = 0
            private set

        fun hasCountryCode(): Boolean {
            return hasCountryCode
        }

        fun setCountryCode(value: Int): PhoneMetadata {
            hasCountryCode = true
            countryCode = value
            return this
        }

        // optional string international_prefix = 11;
        private var hasInternationalPrefix = false
        var internationalPrefix: String = ""
            private set

        fun hasInternationalPrefix(): Boolean {
            return hasInternationalPrefix
        }

        open fun setInternationalPrefix(value: String): PhoneMetadata {
            hasInternationalPrefix = true
            internationalPrefix = value
            return this
        }

        // optional string preferred_international_prefix = 17;
        private var hasPreferredInternationalPrefix = false
        var preferredInternationalPrefix = ""
            private set

        fun hasPreferredInternationalPrefix(): Boolean {
            return hasPreferredInternationalPrefix
        }

        fun setPreferredInternationalPrefix(value: String): PhoneMetadata {
            hasPreferredInternationalPrefix = true
            preferredInternationalPrefix = value
            return this
        }

        fun clearPreferredInternationalPrefix(): PhoneMetadata {
            hasPreferredInternationalPrefix = false
            preferredInternationalPrefix = ""
            return this
        }

        // optional string national_prefix = 12;
        private var hasNationalPrefix = false
        var nationalPrefix = ""
            private set

        fun hasNationalPrefix(): Boolean {
            return hasNationalPrefix
        }

        fun setNationalPrefix(value: String): PhoneMetadata {
            hasNationalPrefix = true
            nationalPrefix = value
            return this
        }

        fun clearNationalPrefix(): PhoneMetadata {
            hasNationalPrefix = false
            nationalPrefix = ""
            return this
        }

        // optional string preferred_extn_prefix = 13;
        private var hasPreferredExtnPrefix = false
        var preferredExtnPrefix = ""
            private set

        fun hasPreferredExtnPrefix(): Boolean {
            return hasPreferredExtnPrefix
        }

        fun setPreferredExtnPrefix(value: String): PhoneMetadata {
            hasPreferredExtnPrefix = true
            preferredExtnPrefix = value
            return this
        }

        fun clearPreferredExtnPrefix(): PhoneMetadata {
            hasPreferredExtnPrefix = false
            preferredExtnPrefix = ""
            return this
        }

        // optional string national_prefix_for_parsing = 15;
        private var hasNationalPrefixForParsing = false
        var nationalPrefixForParsing = ""
            private set

        fun hasNationalPrefixForParsing(): Boolean {
            return hasNationalPrefixForParsing
        }

        fun setNationalPrefixForParsing(value: String): PhoneMetadata {
            hasNationalPrefixForParsing = true
            nationalPrefixForParsing = value
            return this
        }

        // optional string national_prefix_transform_rule = 16;
        private var hasNationalPrefixTransformRule = false
        var nationalPrefixTransformRule = ""
            private set

        fun hasNationalPrefixTransformRule(): Boolean {
            return hasNationalPrefixTransformRule
        }

        fun setNationalPrefixTransformRule(value: String): PhoneMetadata {
            hasNationalPrefixTransformRule = true
            nationalPrefixTransformRule = value
            return this
        }

        fun clearNationalPrefixTransformRule(): PhoneMetadata {
            hasNationalPrefixTransformRule = false
            nationalPrefixTransformRule = ""
            return this
        }

        // optional bool same_mobile_and_fixed_line_pattern = 18 [default = false];
        private var hasSameMobileAndFixedLinePattern = false
        var sameMobileAndFixedLinePattern = false
            private set

        fun hasSameMobileAndFixedLinePattern(): Boolean {
            return hasSameMobileAndFixedLinePattern
        }

        fun setSameMobileAndFixedLinePattern(value: Boolean): PhoneMetadata {
            hasSameMobileAndFixedLinePattern = true
            sameMobileAndFixedLinePattern = value
            return this
        }

        fun clearSameMobileAndFixedLinePattern(): PhoneMetadata {
            hasSameMobileAndFixedLinePattern = false
            sameMobileAndFixedLinePattern = false
            return this
        }

        // repeated NumberFormat number_format = 19;
        private val numberFormat_: MutableList<NumberFormat> = ArrayList()

        @Deprecated("")
        fun numberFormats(): List<NumberFormat> {
            return numberFormatList
        }

        val numberFormatList: List<NumberFormat>
            get() = numberFormat_

        @Deprecated("")
        fun numberFormatSize(): Int {
            return numberFormatCount
        }

        val numberFormatCount: Int
            get() = numberFormat_.size

        fun getNumberFormat(index: Int): NumberFormat {
            return numberFormat_[index]
        }

        fun addNumberFormat(value: NumberFormat?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            numberFormat_.add(value)
            return this
        }

        // repeated NumberFormat intl_number_format = 20;
        private val intlNumberFormat_: MutableList<NumberFormat> = ArrayList()

        @Deprecated("")
        fun intlNumberFormats(): List<NumberFormat> {
            return intlNumberFormatList
        }

        val intlNumberFormatList: List<NumberFormat>
            get() = intlNumberFormat_

        @Deprecated("")
        fun intlNumberFormatSize(): Int {
            return intlNumberFormatCount
        }

        val intlNumberFormatCount: Int
            get() = intlNumberFormat_.size

        fun getIntlNumberFormat(index: Int): NumberFormat {
            return intlNumberFormat_[index]
        }

        fun addIntlNumberFormat(value: NumberFormat?): PhoneMetadata {
            if (value == null) {
                throw NullPointerException()
            }
            intlNumberFormat_.add(value)
            return this
        }

        fun clearIntlNumberFormat(): PhoneMetadata {
            intlNumberFormat_.clear()
            return this
        }

        // optional bool main_country_for_code = 22 [default = false];
        private var hasMainCountryForCode = false
        var isMainCountryForCode = false
            private set

        fun hasMainCountryForCode(): Boolean {
            return hasMainCountryForCode
        }

        // Method that lets this class have the same interface as the one generated by Protocol Buffers
        // which is used by C++ build tools.
        fun getMainCountryForCode(): Boolean {
            return isMainCountryForCode
        }

        fun setMainCountryForCode(value: Boolean): PhoneMetadata {
            hasMainCountryForCode = true
            isMainCountryForCode = value
            return this
        }

        fun clearMainCountryForCode(): PhoneMetadata {
            hasMainCountryForCode = false
            isMainCountryForCode = false
            return this
        }

        // optional string leading_digits = 23;
        private var hasLeadingDigits = false
        var leadingDigits = ""
            private set

        fun hasLeadingDigits(): Boolean {
            return hasLeadingDigits
        }

        fun setLeadingDigits(value: String): PhoneMetadata {
            hasLeadingDigits = true
            leadingDigits = value
            return this
        }

        // optional bool mobile_number_portable_region = 32 [default = false];
        private var hasMobileNumberPortableRegion = false
        private var mobileNumberPortableRegion_ = false
        fun hasMobileNumberPortableRegion(): Boolean {
            return hasMobileNumberPortableRegion
        }

        val isMobileNumberPortableRegion: Boolean
            get() = getMobileNumberPortableRegion()

        private fun getMobileNumberPortableRegion(): Boolean {
            return mobileNumberPortableRegion_
        }

        fun setMobileNumberPortableRegion(value: Boolean): PhoneMetadata {
            hasMobileNumberPortableRegion = true
            mobileNumberPortableRegion_ = value
            return this
        }

        fun clearMobileNumberPortableRegion(): PhoneMetadata {
            hasMobileNumberPortableRegion = false
            mobileNumberPortableRegion_ = false
            return this
        }

        companion object {
            private const val serialVersionUID: Long = 1

            @JvmStatic
            fun newBuilder(): Builder {
                return Builder()
            }
        }
    }

    object PhoneMetadataSerializer : KSerializer<PhoneMetadata> {
        override val descriptor: SerialDescriptor = buildClassSerialDescriptor("PhoneMetadata") {
            // Add descriptors for all properties in your class
            element<Boolean>("hasGeneralDesc")
            element<PhoneNumberDesc?>("generalDesc")
            element<Boolean>("hasFixedLine")
            element<PhoneNumberDesc?>("fixedLine")
            element<Boolean>("hasMobile")
            element<PhoneNumberDesc?>("mobile")
            element<Boolean>("hasTollFree")
            element<PhoneNumberDesc?>("tollFree")
            element<Boolean>("hasPremiumRate")
            element<PhoneNumberDesc?>("premiumRate")
            element<Boolean>("hasSharedCost")
            element<PhoneNumberDesc?>("sharedCost")
            element<Boolean>("hasPersonalNumber")
            element<PhoneNumberDesc?>("personalNumber")
            element<Boolean>("hasVoip")
            element<PhoneNumberDesc?>("voip")
            element<Boolean>("hasPager")
            element<PhoneNumberDesc?>("pager")
            element<Boolean>("hasUan")
            element<PhoneNumberDesc?>("uan")
            element<Boolean>("hasEmergency")
            element<PhoneNumberDesc?>("emergency")
            element<Boolean>("hasVoicemail")
            element<PhoneNumberDesc?>("voicemail")
            element<Boolean>("hasShortCode")
            element<PhoneNumberDesc?>("shortCode")
            element<Boolean>("hasStandardRate")
            element<PhoneNumberDesc?>("standardRate")
            element<Boolean>("hasCarrierSpecific")
            element<PhoneNumberDesc?>("carrierSpecific")
            element<Boolean>("hasSmsServices")
            element<PhoneNumberDesc?>("smsServices")
            element<Boolean>("hasNoInternationalDialling")
            element<PhoneNumberDesc?>("noInternationalDialling")
            element<String>("id")
            element<Int>("countryCode")
            element<String>("internationalPrefix")
            element<Boolean>("hasPreferredInternationalPrefix")
            element<String>("preferredInternationalPrefix")
            element<Boolean>("hasNationalPrefix")
            element<String>("nationalPrefix")
            element<Boolean>("hasPreferredExtnPrefix")
            element<String>("preferredExtnPrefix")
            element<Boolean>("hasNationalPrefixForParsing")
            element<String>("nationalPrefixForParsing")
            element<Boolean>("hasNationalPrefixTransformRule")
            element<String>("nationalPrefixTransformRule")
            element<Boolean>("sameMobileAndFixedLinePattern")
            element<Int>("numberFormatSize")
            element<Int>("intlNumberFormatSize")
            element<Boolean>("isMainCountryForCode")
            element<Boolean>("hasLeadingDigits")
            element<String>("leadingDigits")
            element<Boolean>("hasMobileNumberPortableRegion")

            // Add other properties similarly
        }

        override fun serialize(encoder: Encoder, value: PhoneMetadata) {
            val compositeOutput = encoder.beginStructure(descriptor)
            compositeOutput.encodeBooleanElement(descriptor, 0, value.hasGeneralDesc())
            if (value.hasGeneralDesc()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 1, PhoneNumberDescSerializer, value.generalDesc!!
                )
            }

            compositeOutput.encodeBooleanElement(descriptor, 2, value.hasFixedLine())
            if (value.hasFixedLine()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 3, PhoneNumberDescSerializer, value.generalDesc!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 4, value.hasFixedLine())
            if (value.hasMobile()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 5, PhoneNumberDescSerializer, value.generalDesc!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 6, value.hasTollFree())
            if (value.hasTollFree()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 7, PhoneNumberDescSerializer, value.generalDesc!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 8, value.hasPremiumRate())
            if (value.hasPremiumRate()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 9, PhoneNumberDescSerializer, value.premiumRate!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 10, value.hasSharedCost())
            if (value.hasSharedCost()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 11, PhoneNumberDescSerializer, value.sharedCost!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 12, value.hasPersonalNumber())
            if (value.hasPersonalNumber()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 13, PhoneNumberDescSerializer, value.personalNumber!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 14, value.hasVoip())
            if (value.hasVoip()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 15, PhoneNumberDescSerializer, value.voip!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 16, value.hasPager())
            if (value.hasPager()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 17, PhoneNumberDescSerializer, value.pager!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 18, value.hasUan())
            if (value.hasUan()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 19, PhoneNumberDescSerializer, value.uan!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 20, value.hasEmergency())
            if (value.hasEmergency()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 21, PhoneNumberDescSerializer, value.emergency!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 22, value.hasVoicemail())
            if (value.hasVoicemail()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 23, PhoneNumberDescSerializer, value.voicemail!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 24, value.hasShortCode())
            if (value.hasShortCode()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 25, PhoneNumberDescSerializer, value.shortCode!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 26, value.hasStandardRate())
            if (value.hasStandardRate()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 27, PhoneNumberDescSerializer, value.standardRate!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 28, value.hasCarrierSpecific())
            if (value.hasCarrierSpecific()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 29, PhoneNumberDescSerializer, value.carrierSpecific!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 30, value.hasSmsServices())
            if (value.hasSmsServices()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 31, PhoneNumberDescSerializer, value.smsServices!!
                )
            }
            compositeOutput.encodeBooleanElement(descriptor, 32, value.hasNoInternationalDialling())
            if (value.hasNoInternationalDialling()) {
                compositeOutput.encodeSerializableElement(
                    descriptor, 33, PhoneNumberDescSerializer, value.noInternationalDialling!!
                )
            }
            compositeOutput.encodeStringElement(
                descriptor, 34, value.id!!
            )
            compositeOutput.encodeIntElement(
                descriptor, 35, value.countryCode
            )
            compositeOutput.encodeStringElement(
                descriptor, 36, value.internationalPrefix
            )
            compositeOutput.encodeBooleanElement(
                descriptor, 37, value.hasInternationalPrefix()
            )
            if (value.hasInternationalPrefix()) {
                compositeOutput.encodeStringElement(
                    descriptor, 38, value.internationalPrefix
                )
            }
            compositeOutput.encodeBooleanElement(
                descriptor, 39, value.hasNationalPrefix()
            )
            if (value.hasNationalPrefix()) {
                compositeOutput.encodeStringElement(
                    descriptor, 40, value.nationalPrefix
                )
            }
            compositeOutput.encodeBooleanElement(
                descriptor, 41, value.hasPreferredExtnPrefix()
            )
            if (value.hasPreferredExtnPrefix()) {
                compositeOutput.encodeStringElement(
                    descriptor, 42, value.preferredExtnPrefix
                )
            }
            compositeOutput.encodeBooleanElement(
                descriptor, 43, value.hasNationalPrefixForParsing()
            )
            if (value.hasNationalPrefixForParsing()) {
                compositeOutput.encodeStringElement(
                    descriptor, 44, value.nationalPrefixForParsing
                )
            }
            compositeOutput.encodeBooleanElement(
                descriptor, 45, value.hasNationalPrefixTransformRule()
            )
            if (value.hasNationalPrefixTransformRule()) {
                compositeOutput.encodeStringElement(
                    descriptor, 46, value.nationalPrefixForParsing
                )
            }
            compositeOutput.encodeBooleanElement(
                descriptor, 47, value.hasSameMobileAndFixedLinePattern()
            )
            compositeOutput.encodeSerializableElement(
                descriptor, 48, ListSerializer(
                    NumberFormatSerializer
                ), value.numberFormatList
            )
            compositeOutput.encodeSerializableElement(
                descriptor, 49, ListSerializer(
                    NumberFormatSerializer
                ), value.intlNumberFormatList
            )
            compositeOutput.encodeBooleanElement(
                descriptor, 50, value.isMainCountryForCode
            )
            compositeOutput.encodeBooleanElement(
                descriptor, 51, value.hasLeadingDigits()
            )
            if (value.hasLeadingDigits()) {
                compositeOutput.encodeStringElement(
                    descriptor, 52, value.leadingDigits
                )
            }
            compositeOutput.encodeBooleanElement(
                descriptor, 53, value.isMobileNumberPortableRegion
            )
            // Serialize other properties similarly
            compositeOutput.endStructure(descriptor)
        }

        override fun deserialize(decoder: Decoder): PhoneMetadata {
            val compositeInput = decoder.beginStructure(descriptor)
            val phoneMetadata = PhoneMetadata()
            var hasDesc = false
            var hasString = false
            // Initialize other properties
            loop@ while (true) {
                when (val index = compositeInput.decodeElementIndex(descriptor)) {
                    CompositeDecoder.DECODE_DONE -> break@loop
                    0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32 -> hasDesc =
                        compositeInput.decodeBooleanElement(descriptor, index)

                    37, 39, 41, 43, 45, 51 -> hasString =
                        compositeInput.decodeBooleanElement(descriptor, index)

                    1 -> if (hasDesc) {
                        phoneMetadata.setGeneralDesc(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    3 -> if (hasDesc) {
                        phoneMetadata.setFixedLine(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    5 -> if (hasDesc) {
                        phoneMetadata.setMobile(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    7 -> if (hasDesc) {
                        phoneMetadata.setTollFree(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    9 -> if (hasDesc) {
                        phoneMetadata.setPremiumRate(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    11 -> if (hasDesc) {
                        phoneMetadata.setSharedCost(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    13 -> if (hasDesc) {
                        phoneMetadata.setPersonalNumber(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    15 -> if (hasDesc) {
                        phoneMetadata.setVoip(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    17 -> if (hasDesc) {
                        phoneMetadata.setPager(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    19 -> if (hasDesc) {
                        phoneMetadata.setUan(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    21 -> if (hasDesc) {
                        phoneMetadata.setEmergency(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    23 -> if (hasDesc) {
                        phoneMetadata.setVoicemail(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    25 -> if (hasDesc) {
                        phoneMetadata.setShortCode(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    27 -> if (hasDesc) {
                        phoneMetadata.setStandardRate(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    29 -> if (hasDesc) {
                        phoneMetadata.setCarrierSpecific(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    31 -> if (hasDesc) {
                        phoneMetadata.setSmsServices(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    33 -> if (hasDesc) {
                        phoneMetadata.setNoInternationalDialling(
                            compositeInput.decodeSerializableElement(
                                descriptor, index, PhoneNumberDescSerializer
                            )
                        )
                    }

                    34 -> phoneMetadata.setId(
                        compositeInput.decodeStringElement(descriptor, index)
                    )

                    35 -> phoneMetadata.setCountryCode(
                        compositeInput.decodeIntElement(descriptor, index)
                    )

                    36 -> phoneMetadata.setInternationalPrefix(
                        compositeInput.decodeStringElement(
                            descriptor, index
                        )
                    )

                    38 -> if (hasString) {
                        phoneMetadata.setPreferredInternationalPrefix(
                            compositeInput.decodeStringElement(
                                descriptor, index
                            )
                        )
                    }

                    40 -> if (hasString) {
                        phoneMetadata.setNationalPrefix(
                            compositeInput.decodeStringElement(
                                descriptor, index
                            )
                        )

                    }

                    42 -> if (hasString) {
                        phoneMetadata.setPreferredExtnPrefix(
                            compositeInput.decodeStringElement(
                                descriptor, index
                            )
                        )
                    }

                    44 -> if (hasString) {
                        phoneMetadata.setNationalPrefixForParsing(
                            compositeInput.decodeStringElement(
                                descriptor, index
                            )
                        )
                    }

                    46 -> if (hasString) {
                        phoneMetadata.setNationalPrefixTransformRule(
                            compositeInput.decodeStringElement(
                                descriptor, index
                            )
                        )
                    }

                    47 -> phoneMetadata.setSameMobileAndFixedLinePattern(
                        compositeInput.decodeBooleanElement(
                            descriptor, index
                        )
                    )

                    48 -> {
                        val values = compositeInput.decodeSerializableElement(
                            descriptor, index,
                            ListSerializer(
                                NumberFormatSerializer
                            ),
                        )

                        values.forEach {
                            phoneMetadata.addNumberFormat(it)
                        }

                    }

                    49 -> {
                        val values = compositeInput.decodeSerializableElement(
                            descriptor, index,
                            ListSerializer(
                                NumberFormatSerializer
                            ),
                        )
                        values.forEach {
                            phoneMetadata.addIntlNumberFormat(it)
                        }
                    }

                    50 -> {
                        phoneMetadata.setMainCountryForCode(
                            compositeInput.decodeBooleanElement(descriptor, index)
                        )

                    }

                    52 -> {
                        if (hasString) {
                            phoneMetadata.setLeadingDigits(
                                compositeInput.decodeStringElement(
                                    descriptor, index
                                )
                            )
                        }
                    }

                    53 -> {
                        phoneMetadata.setMobileNumberPortableRegion(
                            compositeInput.decodeBooleanElement(
                                descriptor, index
                            )
                        )
                    }
                }
            }
            compositeInput.endStructure(descriptor)
            return phoneMetadata
        }
    }

    open class PhoneMetadataCollection {
        /**
         * Provides a dummy builder.
         *
         * @see NumberFormat.Builder
         */
        class Builder : PhoneMetadataCollection() {
            fun build(): PhoneMetadataCollection {
                return this
            }
        }

        // repeated PhoneMetadata metadata = 1;
        private val metadata_: MutableList<PhoneMetadata> = ArrayList()
        val metadataList: List<PhoneMetadata>
            get() = metadata_
        val metadataCount: Int
            get() = metadata_.size

        fun addMetadata(value: PhoneMetadata?): PhoneMetadataCollection {
            if (value == null) {
                throw NullPointerException()
            }
            metadata_.add(value)
            return this
        }

        fun clear(): PhoneMetadataCollection {
            metadata_.clear()
            return this
        }

        companion object {
            private const val serialVersionUID: Long = 1

            @JvmStatic
            fun newBuilder(): Builder {
                return Builder()
            }
        }
    }

    object PhoneMetadataCollectionSerializer : KSerializer<PhoneMetadataCollection> {
        override val descriptor: SerialDescriptor =
            buildClassSerialDescriptor("PhoneMetadataCollection") {
                element<List<PhoneMetadata>>("metadata")
            }

        override fun serialize(encoder: Encoder, value: PhoneMetadataCollection) {
            encoder.encodeSerializableValue(
                ListSerializer(PhoneMetadataSerializer), value.metadataList
            )
        }

        override fun deserialize(decoder: Decoder): PhoneMetadataCollection {
            return PhoneMetadataCollection().apply {
                decoder.decodeSerializableValue(ListSerializer(PhoneMetadataSerializer)).forEach {
                    addMetadata(
                        it
                    )
                }
            }
        }
    }
}
